c
c-----------------------------------------------------------
c
      subroutine sac2gfs4(sacname,io_gfs,npts)
c
c Converts SAC files to GFS type 1 format. This routine is 
c typically used to process SAC files which were generated by 
c "collect". 
c 
c input:
c  sacname = name of SAC file to read
c  io_gfs  = GFS unit number to write to
c  npts    = number of samples in sac file
c
      character sacname*(*),ktemp*8,
     &          nsta*4, nchn*4, ntyp*4
      dimension head(30)
      common/myhed/nscan,nsta,nchn,ntyp,iy,id,ih,im,ss,dt,
     &             qlat,qlon,qdep,jy,jd,jh,jm,sss,spare(12)
      real*8 ipoch8,tt
      logical flag
      equivalence (head,nscan)
      pointer (ptr,rdata)
c

      ilen = lnblnk(sacname)
      if (ilen.eq.0) goto 100
      maxpts = npts
      ptr    = malloc(4*npts)
      if (ptr.ne.0) then
        write(*,*) 'ERROR - cannot malloc in sac2gfs4'
        return
      endif
c
c read SAC binary file
c
      call rsac1(sacname(1:ilen),rdata,nscan,beg,dt,maxpts,nerr)
      if (nerr.ne.0) then
        write(*,*) 'ERROR reading SAC file: ',sacname(1:ilen)
        call free(ptr)
        return
      endif
      if (nscan.ne.npts) then
        write(*,*) 'WARNING - discrepancy between npts and nscan'
      endif
      call getlhv('LEVEN',flag,nerr)
      call getnhv('NZYEAR',iy,nerr)
      call getnhv('NZJDAY',id,nerr)
      call getnhv('NZHOUR',ih,nerr)
      call getnhv('NZMIN', im,nerr)
      call getnhv('NZSEC', isec,nerr)
      call getnhv('NZMSEC',msec,nerr)
      ss = float(isec) + float(msec) / 1000.
c
c The start of the data is "beg" seconds after the
c time "iy,id:ih:im:ss".
c So, we convert time to epochal then back again
c to put the actual start time into "iy,id:ih:im:ss".
c
      tt = ipoch8(iy,id,ih,im,ss+beg)
      call bipoch8(tt,iy,id,ih,im,ss)
      call getkhv('KSTNM',ktemp,nerr)
      nsta = ktemp(1:4)
      call getkhv('KCMPNM',ktemp,nerr)
      nchn = ktemp(1:4)
      call getkhv('KNETWK',ktemp,nerr)
      ntyp = ktemp(1:4)
      qlat = 0.0
      qlon = 0.0
      qdep = 0.0
      jy = 0
      jd = 0
      jh = 0
      jm = 0
      sss = 0.0
c
c write out GFS file
c
      call gfs_rwentry(io_gfs,head,rdata,0,'w')
      call free(ptr)
 100  continue
      return
      end
