     GFS (Rev.2)
         GFS is a disc file system designed primarily for storing seismic
        data. The program is in an experimental stage and all errors or
        desired modifications should be addressed to Guy Masters.
         Revision history
          Dec 1986 exception handler installed to avoid the mangling of 
        GFS directories during an unusual program exit (e.g. ctrl Q ).
          May 1987 include special time format in search procedures
 
     File Structure

         The structure of a GFS file is the usual one, i.e., a number of time
        series with header information for each time series stored in a
        directory. The file system does have some novel features. A GFS file is
        actually an Apollo directory and the directory and individual time
        series are separate Apollo files. This means that each time series
        can be extended or deleted without affecting any of the other time
        series. The file system also allows the user to define any number of
        header structures through a user supplied routine DEFHDR ( see 
        section 5). Finally, rudimentary database software is included for 
        rapid access of time series with desired attributes.
         The directory is an Apollo fixed length record, binary file and allows
        rapid random access of any particular header.The time series are stored
        as Apollo undefined record structure, binary files, i.e., individual
        time series are stored as continuous bit streams and can be arbitrarily
        long. This makes random io within a time series easy and also allows
        easy extension of time series. The number of time series that can be
        stored in a GFS file is currently limited to 1,265 (the limit on the
        number of entries in an Apollo directory is 1,266).
         The file system works on the unit number principle (similar to FORTRAN
        io routines). Currently you are allowed up to 10 units open by a single
        program. Each unit number can have a different header definition so you
        can define file structures of different types and use the same GFS
        routines to access them.
         When a file is opened, the directory is opened and left opened until
        the file is closed. Routines are available which allow you to search
        the directory for time series which have desired attributes (see 
        section 6). You can then access the desired time series but presently
        you can access only one time series on a particular unit number at
        once.                                                          
         Routines are available which work at various levels within the file
        structure. A description of the routines which might be useful to the
        user now follows. Note that all integers in GFS calls are i*4.

     Summary of GFS routines

        GFS_OPEN    - opens a GFS file
        GFS_OPENA   - opens a GFS file (for interactive use)
        GFS_CLOSE   - closes or deletes a GFS file
        GFS_ERASE   - erases contents of a GFS file (leaving it open)
        GFS_RWENTRY - reads,writes or replaces complete time series + headers
        GFS_DENTRY  - deletes a time series and its associated header
        GFS_CENTRY  - copies a time series and its associated header
        GFS_RWDIR   - reads,writes or replaces headers in the directory
        GFS_RWDATA  - reads or writes within a time series
        GFS_PHDEF   - prints user defined search attributes
        GFS_SDEF    - allows interactive input of a set of search attributes
        GFS_SEARCH  - selects time series which match a given set of attributes
        GFS_SWAP    - interchanges two entries whithin a single GFS file 
        DEFHDR      - user supplied routine defining header structures
        PRHDR       - user supplied routine to print headers

     1) Routines which operate on GFS files.

        GFS_OPEN(io,name,itype,iret)
          io - unit number in the range 1 to 10 (no conflict with FORTRAN unit
               numbers)
          name - up to 256 character treename or leafname. (If this is read in
               interactively, remember to blank out the character array before
               input - or use routine GFS_OPENA described below)
          itype - a positive integer which defines the header type of this file
               (see section 5). itype is input if you are opening a new file
               and is returned if you are opening an existing file.
          iret - return code
        description - creates a GFS file if it doesn't exist and opens the
        directory. Opens GFS file if it does exist and opens the directory. No
        overwriting is performed when an existing file is opened. If iret is
        negative, a fatal error has occured, if iret is zero, a new file with
        header type 'itype' has been successfully opened, if iret is greater
        than zero, an existing file with iret entries has been successfully
        opened and the header type 'itype' is returned.

        GFS_OPENA(io,remark,itype,iret)
          io - unit number
          remark - a character string enclosed in single quotes
          itype - as in GFS_OPEN
          iret - as in GFS_OPEN
        description - a version of GFS_OPEN for interactive use, remark is
        printed on the screen and the system waits for you to input the file
        name. Remark would typically be 'input file name :' or some other
        profound comment.

        GFS_CLOSE(io)
          io - unit number
        description - closes file on unit io, so releasing this unit for
        future use. If a file is empty or if -io is input, the routine
        deletes the file on unit io.

        GFS_ERASE(io)
          io - unit number
        description - erases the contents of the file on unit io without
        closing it. This routine can be called straight after GFS_OPEN to 
        ensure that a file is empty before writing.

     2) Routines which operate on directories and time series

        GFS_RWENTRY(io,hdr,buf,k,op)
          io - unit number
          hdr - first element of header array
          buf - first element of data array
          k - index of entry to be read or written.
          op - a lowercase character enclosed in single quotes (see below)
        description - a canned routine for reading,writing or replacing
        complete time series and their associated headers.
        If op='r' the k'th time series is read into buf and its header is read
                  into hdr.
        If op='w' and k is set to zero or is greater than the number of 
                  existing entries in the file, the new time series in buf is
                  appended to the file and the directory is updated with the
                  header information in hdr.
        If op='w' and k is the index of an existing entry, the time series and
                  its associated header in the directory are overwritten with
                  the contents of buf and hdr respectively. The new time series
                  does not have to be the same length as the old one.

        GFS_DENTRY(io,k)
          io - unit number
          k - index of entry to be deleted
        description - deletes the k'th time series in the file on unit io and
        updates the directory accordingly.

        GFS_CENTRY(io,io1,k,k1)
          io - input unit number
          io1 - output unit number
          k - index of entry on unit io to be copied
          k1 - index of entry on unit io1 to be written or overwritten
        description - copies the k'th time series from unit io to unit io1.
        If k1 is set to zero or is greater than the number of existing entries
        on unit io1, the time series is automatically appended to the file on
        unit io1 and the directory on unit io1 is updated. If k1 is the index
        of an existing entry on unit io1,then this entry is overwritten.
 
        GFS_SWAP(io,k1,k2)
          io - unit number
          k1,k2 - index of entries to be interchanged

     3) Manipulating the directory

        The directory is opened by GFS_OPEN or GFS_OPENA and is closed by
        GFS_CLOSE. You may also read,write and replace directory entries
        (headers) with the following routine.

        GFS_RWDIR(io,hdr,k,op,ierr)
          io - unit number
          hdr - first element of header array
          k - index of header
          op - a lowercase character enclosed in single quotes (see below)
          ierr - error code (zero if successful)
        description -
        If op='r' the routine will read the k'th header into the array hdr
                  (ierr will usually only be non-zero if you try and read a non 
                  existant header)
        If op='w' and k is zero or is greater than the number of existing
                  entries, the routine appends a header to the directory.
        If op='w' and k is the index of an existing entry, the header of the
                  k'th time series will be overwritten with the contents of hdr

     4) Manipulating time series

        The following routine is useful when you want to perform random io 
        within a time series.

        GFS_RWDATA(io,buf,k,n1,nwd,op,ierr)
          io - unit number
          buf - first element of data array
          k - index of time series to be accessed
          n1 - index of first data word to be read or written
          nwd - number of data words to be read or written
          op - a lowercase character enclosed in single quotes (see below)
          ierr - error code (zero if successful, even on a partial read)
        description - 
        If op='r' the routine reads nwd data points starting at point n1 in
                  the time series into the array buf. If you try and read past
                  the end of data, nwd is returned as the actual number of
                  points read (ierr will still be zero)
        If op='w' the routine writes nwd data points from the array buf into
                  the file starting at point n1 in the file. You are allowed to
                  to extend the time series past the old end of data but 
                  remember to update the new word count in the appropiate
                  directory entry using GFS_RWDIR if you do this.
        Note that the type of data word has been defined by the user (see 
        section 5) and may be i*2,i*4,r*4,r*8 or complex. n1 and nwd refer to
        the user defined word type of the file.
        Note also that time series are stored as separate files so GFS_RWDATA
        also opens and closes time series. The first call to GFS_RWDATA with a
        new value of k first causes any previously opened time series on this
        unit number to be closed and then opens the k'th time series. This time
        series will remain open until a new time series is accessed by a call 
        to GFS_RWDATA with a new value of k. When a time series is closed, the
        appropriate header in the directory is checked and, if the word count
        has changed, an eof is written at the new end of data. You must
        therefore update the header (if appropriate) before accessing a new
        time series on this unit. k must be the index of an existing time
        series or, if you are appending a time series, it must have the proper
        value that this entry will have in the directory.
         
     5) User defined routines        

        The user must supply at least one routine, DEFHDR, which defines any
        number of header structures. A second routine, PRHDR, which prints
        headers of a particular type in your favorite format is also required
        for many applications.

        *** There are two restrictions on header definitions :1) items in 
        headers must cover an integral number of 4byte words and 2) the first
        word of the header must be the number of points in the accompanying
        time series (a 4byte integer) ***

        DEFHDR(io,itype)
          io - unit number
          itype - type of header definition to be associated with this unit
                number (a positive integer)
        description - the routine accesses two common blocks and the first few
        lines of code look like :

                subroutine DEFHDR(io,itype)
                common/hd$$$$/lhed(10),nwb(10),nfil(10),ktype(10),kopen(10)
                common/at$$$$/natt(10),iatt(3,20,10),attrem(20,10)
                character*16 attrem
                goto (10,20,30,.....etc),itype
             10 continue
          c  definition of header attributes for itype=1
                :
                :
                return
             20 continue
          c  definition of header attributes for itype=2
                :
                etc

        For each header type you must set :
          lhed(io) - the number of 4byte words in the header (can be larger
                     than the number actually used)
          nwb(io) - the number of bytes per data word (=2 for i*2, =4 for i*4
                     or r*4, =8 for r*8 or complex)
          natt(io) - the number of attributes defined for searching. Up to 20
                     items in the header can be defined as search variables 
                     for use with the selection routines described in sect. 6.
        For each defined attribute the following information is required:
          attrem(k,io) - a 16 character array describing the k'th attribute.
                     For example, if the second defined attribute is the 
                     station channel, you might set
                                attrem(2,io)='station channel '
          iatt(1,k,io) - the index of the first 4byte word of the k'th 
                     attribute in the header
          iatt(2,k,io) - the index of the last 4byte word of the k'th
                     attribute in the header (this need only be set if the
                     attribute is a character string)
          iatt(3,k,io) - attribute type (a 4byte integer). The following
                     values are possible :
                0  character string          
                1  integer          (equality)
                2  real*4           (equality)
                3  real*8           (equality)
                4  integer          (range)
                5  real*4           (range)
                6  real*8           (range)
                7  time             (equality)
                8  time             (range)
    
        "equality" means that a search will be successful if the defined
        attribute equals an input search variable."range" means that a search
        will be successful if the defined attribute falls within an input
        range. Character strings are always treated as equalities and each
        character attribute to be searched on must be less than 40 characters
        long. "time" is a special format and is defined by (yr,dy,hr,mn,sec) 
        ( 4 integers followed by a real ) which must cover 5 consecutive 4byte 
        locations in the header.

        PRHDR(nfl,hdr,itype)
          nfl - an integer that can be printed with the header to show which
                entry in the directory this is.
          hdr - first element of header array to be printed
          itype - the header type
        description - an example of PRHDR is given below and also shows how
        headers can be manipulated in code.

                subroutine PRHDR(nfl,hdr,itype)
                dimension hdr(1),hed1(50),hed2(50),hed3(50), etc
                common/myhed1/npts1,nsta,nchn,ntyp,iy,id,ih,im,sec,dt,spare(40)
                common/myhed2/npts2,......etc
                equivalence (npts1,hed1),(npts2,hed2), etc
                goto (10,20,30,...etc),itype
             10 do 1 i=1,10
              1 hed1(i)=hdr(i)
                print 900,nfl,nsta,nchn,ntyp,iy,id,ih,im,sec,dt,npts1
            900 format(i5,2x,a4,2x,a4,2x,a4,i6,i4,2i3,2f6.3,i8)
                return
             20 do 2 i=1,length of second header type
              2 hed2(i)=hdr(i)
                print 901, etc

        Equivalencing an array into the first word of a common block describing
        your header overlays the common block into that array. The array can
        then be read or written using GFS routines.

     6) Selection routines

        If you have taken the trouble to define some attributes in DEFHDR, you
        can use these to select time series which match some combination of
        desired attributes. DEFHDR is called by GFS_OPEN or GFS_OPENA but you
        can call it at any time to set up defining attributes. Routines which
        use these attributes are :

        GFS_PHDEF(io)
          io - unit number
        description - prints the comments in the array attrem to remind you
        what attributes you have defined for the file on unit io

        GFS_SDEF(io)
          io - unit number
        description - allows interactive input of search variables. A call to
        this routine causes the prompt 'enter search index (0 quits)' to be
        printed on the screen. Enter the index of the desired attribute. The
        routine then expects you to enter an appropriate value or values for
        this attribute - this might be a character string or a minimum and
        maximum value for an integer, etc. The prompt 'enter search index'
        will reappear. You can enter up to 40 search variables.(Some attributes
        may be repeated, e.g., if you want horizontal components and you have
        defined station channel as a character attribute with the possible
        values VERT,N-S and E-W, you can search simultaneously for time series
        with station channel equal to N-S or E-W). If you enter a large integer
        (e.g., 99) at the prompt, a list of currently set search variables will
        be printed. Items from this list can be removed by typing the negative
        of the entry number in the list that you want to remove. In this way
        you can edit your list of search attributes until you are satisfied
        with it. Typing a 0 at the prompt returns control to the calling
        program.

        GFS_SEARCH(io,hdr,k,ksrch)
          io - unit number
          hdr - first element of header array
          k - time series index (see below)
          ksrch - search type (0 or 1)
        description - searches file on unit io for time series with attributes
        which match the search variables input using GFS_SDEF. Searches start
        at the k+1 entry so this routine is normally called with k=0 to begin
        a search at the beginning of a file. If a time series is found with
        attributes which match your search variables then k is the index of
        that time series and its header is returned in array hdr. If the end
        of a file is detected, k is returned as -1. If a time series is
        successfully found, the next call to GFS_SEARCH would use the last
        value of k and continue the search at the k+1 entry. ksrch defines the
        type of search to be performed. If ksrch=0, the search is of 'and' type
        i.e., if .... and .... is true, I have a match. If ksrch is not equal 
        to zero, the search is of 'or' type, i.e., if .... or .... is true, I
        have a match. Note that if an attribute is repeated, ksrch=0 performs
        a search with the logic : 
                if .... and (.... or ....) is true, I have a match.
                           repeated attribute

     7) Notes on using GFS

        GFS uses six common blocks, you should avoid duplicating these common
        block names in your code :
            nm$$$$, hd$$$$, wk$$$$, sr$$$$, st$$$$, at$$$$.
        The binary for all these routines is called gfs.lib and can be found
        in //bull/users/lfseis/lfrec.dir. An example of the user supplied routines
        DEFHDR and PRHDR can be found here in usr.ftn. There is also a program
        for GFS file manipulation called 'iutil', it should be obvious how to
        use it.
        Remember that GFS files are Apollo directories so they can be 
        manipulated using shell commands such as dlt,cpt etc.


        [I have experienced some difficulty with the binder not finding all
        routines (even though it claims it has). This problem can be cured
        by using the librarian e.g. the command lbr -c libname binname  makes
        a library of the binary file in binname, libname is then bound in the
        usual way instead of binname. gfs.lib is a library]





A simple example of how to access series in an existing GFS file sequentially

      common/a$/a(10000)
      common/hh$/npts,nsta,nchn,ntyp,jy,jd,jh,jm,sec,si,spare(20)
      dimension head(30)     
      equivalence (npts,head)
c
      itype=-1
      call gfs_opena(3,'input file',itype,nfl)  { open existing file on unit 3
      if(nfl.le.0) goto 10                      { error out if file doesnt exist
      if(itype.ne.1) goto 10                    { error out if not of right type
c
      do 5 ifl=1,nfl                            { loop over time series
        call gfs_rwentry(3,head,a,ifl,'r')      { read series number ifl and its header
        call prhdr(ifl,head,itype)              { print header
c..........................................
c..........................................     { your code here
c..........................................
    5 continue                             
c
   10 call gfs_close(3)                         { close file (dont forget this!!)
      stop
      end


A simple example of how to write series to a GFS file 

      common/a$/a(10000)
      common/hh$/npts,nsta,nchn,ntyp,jy,jd,jh,jm,sec,si,spare(20)
      dimension head(30)     
      equivalence (npts,head)
c
      itype=1
      call gfs_opena(3,'input file',itype,ierr) { open nonexisting file on unit 3
      if(ierr.lt.0) goto 10                      { error out if problem opening
c
      do 5 ifl=1,nfl                            { loop over time series
c..........................................
c..........................................     { your code here
c..........................................
        call gfs_rwentry(3,head,a,ifl,'w')      { write series number ifl and its header
    5 continue                                  { if ifl is set to zero series is appended
c
   10 call gfs_close(3)                         { close file (dont forget this!!)
      stop
      end
